---
- name: Register subscription for RHEL
  when: ansible_os_family == 'RedHat'
  community.general.redhat_subscription:
    username: "{{ lookup('env', 'RHN_USERNAME') }}"
    password: "{{ lookup('env', 'RHN_PASSWORD') }}"
  register: subscription_result
  retries: 3
  delay: 10
  until: subscription_result is not failed


# - name: Update RHEL-based systems
#   when: ansible_os_family == 'RedHat'
#   ansible.builtin.dnf:
#     name: '*'
#     state: latest
#     update_cache: true
#     update_only: true

- name: Validate required environment variables
  ansible.builtin.fail:
    msg: "Required environment variable {{ item }} is not set or is empty"
  when: (lookup('env', item) | default('')) | length == 0
  loop:
    - AAP_ADMIN_PASSWORD
    - RHN_REGISTRY_SVC
    - RHN_REGISTRY_TOKEN
    - RHN_USERNAME
    - RHN_PASSWORD
    - RHSM_OFFLINE_TOKEN
    - RHSM_ALLOCATION_UUID

 # create aap user  adduser aap
- name: Create AAP user
  ansible.builtin.user:
    name: aap
    password: "{{ lookup('env', 'AAP_ADMIN_PASSWORD') | password_hash('sha512') }}"
    shell: /bin/bash
    create_home: true
    home: /home/aap
    state: present
  become: true
  register: aap_user


# add aap user to sudoers but don't make root
- name: Add AAP user to wheel group
  ansible.builtin.user:
    name: aap
    groups: wheel
    append: true
  become: true

- name: Enable lingering for aap user
  ansible.builtin.command:
    cmd: "loginctl enable-linger aap"
  become: true
  when: aap_user.uid is defined

- name: Configure passwordless sudo for aap user
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/aap-access
    line: "aap ALL=(ALL) NOPASSWD: ALL"
    create: yes
    mode: '0440'
    validate: 'visudo -cf %s'
  become: true

- name: Install Podman
  ansible.builtin.dnf:
    name: container-tools
    state: present
  become: true
  register: podman_install

- name: Install Podman
  ansible.builtin.dnf:
    name: podman-docker
    state: present
  become: true
  register: podman_docker

- block:
  - name: "Login to Red Hat Registry"
    ansible.builtin.command:
      cmd: "podman login registry.redhat.io -u \"{{ lookup('env', 'RHN_REGISTRY_SVC') }}\" --password \"{{ lookup('env', 'RHN_REGISTRY_TOKEN') }}\""
  - name: Validate pull image
    ansible.builtin.shell: |
      podman pull registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel9:latest
      podman pull registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest
      podman pull registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9:latest
      podman pull registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8:latest
    register: podman_pull_result
    changed_when: podman_pull_result.rc == 0
  become_user: aap
  become_method: sudo
  become: true
  
- name: Debug Podman Pull
  ansible.builtin.debug:
    var: podman_pull_result

- name: Enable repository management for RHEL
  when: ansible_os_family == 'RedHat'
  ansible.builtin.command:
    cmd: subscription-manager config --rhsm.manage_repos=1
  register: rhsm_manage_repos
  changed_when: rhsm_manage_repos.rc != 0

- name: Install required packages
  block:
    - name: Install packages
      ansible.builtin.dnf:
        name:
          - ansible-core
          - wget
          - git-core
          - rsync
          - vim
          - jq
          - curl
        state: present
      become: true

- name: Get RHSM access token
  ansible.builtin.uri:
    url: "https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token"
    method: POST
    body_format: form-urlencoded
    body:
      grant_type: refresh_token
      client_id: rhsm-api
      refresh_token: "{{ lookup('env', 'RHSM_OFFLINE_TOKEN') }}"
    status_code: 200
  register: rhsm_token
  no_log: false

- name: Sleep to prevent rate limiting
  ansible.builtin.pause:
    seconds: 5

- name: Request manifest export
  ansible.builtin.uri:
    url: "https://api.access.redhat.com/management/v1/allocations/{{ lookup('env', 'RHSM_ALLOCATION_UUID') }}/export"
    method: GET
    headers:
      Authorization: "Bearer {{ rhsm_token.json.access_token }}"
      Accept: "application/json"
    status_code: 200
  retries: 3
  until: manifest_download_id.status == 200
  delay: 30
  register: manifest_download_id

- name: Debug - Show manifest download result
  ansible.builtin.debug:
    var: manifest_download_id

- name: Poll for manifest readiness
  ansible.builtin.uri:
    url: "https://api.access.redhat.com/management/v1/allocations/{{ lookup('env', 'RHSM_ALLOCATION_UUID') }}/exportJob/{{ manifest_download_id.json.body.exportJobID }}"
    method: GET
    headers:
      Authorization: "Bearer {{ rhsm_token.json.access_token }}"
      Accept: "application/json"
    status_code: 200
  register: poll_result
  until: poll_result.status == 200
  retries: 15
  delay: 20
  changed_when: false

- name: Debug - Show poll result
  ansible.builtin.debug:
    var: poll_result

- name: Check manifest export status
  ansible.builtin.debug:
    msg: "Manifest export status: {{ poll_result.json }}"

- name: Sleep to prevent rate limiting
  ansible.builtin.pause:
    seconds: 5

- name: Download manifest file
  ansible.builtin.uri:
    url: "https://api.access.redhat.com/management/v1/allocations/{{ lookup('env', 'RHSM_ALLOCATION_UUID') }}/export/{{ poll_result.json.body.exportID }}"
    method: GET
    headers:
      Authorization: "Bearer {{ rhsm_token.json.access_token }}"
      Accept: "application/zip"
    dest: "/tmp/manifest_AAP_Demo.zip"
    force: true
  register: manifest_file
  retries: 10
  delay: 61

- name: Debug - Show manifest file download result
  ansible.builtin.debug:
    var: manifest_file

- name: Download Ansible Automation Platform setup file
  ansible.builtin.get_url:
    url: "https://github.com/Hashi-RedHat-APJ-Collab/demo-packer-aap/raw/refs/heads/main/{{ aaponlinecontainerizedversion }}"
    dest: /tmp/{{ aaponlinecontainerizedversion }}
  register: download_result

- name: Get information about downloaded file
  ansible.builtin.stat: 
    path: "/tmp/{{ aaponlinecontainerizedversion }}"
  register: file_info

- name: Debug - Show file info
  ansible.builtin.debug:
    var: file_info

- name: Manually extract the installer
  ansible.builtin.command:
    cmd: "tar xfvz /tmp/{{ aaponlinecontainerizedversion }} -C /tmp/"
  register: extract_result

# - name: Debug - Show extract result
#   ansible.builtin.debug:
#     var: extract_result

- name: Find the top-level extracted directory matching the expected pattern
  ansible.builtin.find:
    paths: "/tmp/"
    patterns: "ansible-automation-platform-containerized-setup-*"
    file_type: directory
    recurse: false
  register: extracted_dir

# - name: Set the extracted directory path
#   ansible.builtin.debug:
#     msg: "{{ extracted_dir.files }}"

- name: Set AAP hostname
  ansible.builtin.set_fact:
    aap_hostname: "{{ aap_hostname | default('aap.demo.local') }}"

- name: Update inventory file with template
  ansible.builtin.template:
    src: inventory-growth.j2
    dest: "/tmp/inventory-growth"
    mode: '0644'
  vars:
    new_install_password: "{{ lookup('env', 'AAP_ADMIN_PASSWORD') }}"
    registry_username: "{{ lookup('env', 'RHN_REGISTRY_SVC') }}"
    registry_password: "{{ lookup('env', 'RHN_REGISTRY_TOKEN') }}"
    offline_token: "{{ lookup('env', 'HUB_OFFLINE_TOKEN') }}"
    aap_hostname: "{{ aap_hostname }}"

# check if the inventory file was created
- name: Check if inventory file exists
  ansible.builtin.stat:
    path: "/tmp/inventory-growth"
  register: inventory_file

# output inventory file
- name: Debug - Show inventory file
  ansible.builtin.shell: cat /tmp/inventory-growth
  register: result
  
- name: Show file content
  ansible.builtin.debug:
    msg: "{{ result.stdout }}"

- name: Set the system hostname for the AAP installer
  become: true
  ansible.builtin.command: hostnamectl set-hostname {{ aap_hostname }}

- name: Add entry to /etc/hosts for {{ aap_hostname }}
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "127.0.0.1 {{ aap_hostname }}"
    state: present
    create: true
    backup: true
  become: true

- name: Test Red Hat registry connectivity
  ansible.builtin.uri:
    url: https://catalog.redhat.com
    method: GET
    status_code: 200 # Expect a 200 OK response
    validate_certs: false # Set to true if you want to validate SSL certs
  register: uri_result
  ignore_errors: true

- name: Display URI result
  ansible.builtin.debug:
    msg: "URI access result for registry.redhat.io: {{ uri_result }}"

- name: Create directory for config_as_code
  ansible.builtin.file:
    path: /tmp/config_as_code
    state: directory
    owner: aap
    mode: '0755'
    recurse: true
  become: true

- name: Verify directory ownership
  ansible.builtin.stat:
    path: /tmp/config_as_code
  register: dir_stats

- name: Show ownership
  ansible.builtin.debug:
    msg: "Owner: {{ dir_stats.stat.pw_name }}, Group: {{ dir_stats.stat.gr_name }}"

# test create file in the directory
- name: Create test file in config_as_code directory
  ansible.builtin.file:
    path: /tmp/config_as_code/test_file.txt
    state: touch
    owner: aap
    mode: '0644'
  become_user: aap

- name: "Find AAP installer playbook"
  ansible.builtin.find:
    paths: "/tmp/{{ aapfolderpath }}"
    patterns: "install.yml,install.yaml,site.yml"
    file_type: file
  register: aap_containerized_installer_playbook

# Add after the "Find AAP installer playbook" task:
- name: "Debug - Show AAP installer directory contents"
  ansible.builtin.shell: "ls -la /tmp/{{ aapfolderpath }}"
  register: aap_containerized_dir_contents

- name: "Debug - Display directory contents"
  ansible.builtin.debug:
    var: aap_containerized_dir_contents.stdout_lines

- name: "Debug - Find all files in AAP directory"
  ansible.builtin.find:
    paths: "/tmp/{{ aapfolderpath }}"
    file_type: file
  register: aap_containerized_all_files

- name: "Debug - Display all found files"
  ansible.builtin.debug:
    msg: "Found files: {{ aap_containerized_all_files.files | map(attribute='path') | list }}"

- name: "Debug - Show find results"
  ansible.builtin.debug:
    var: aap_containerized_installer_playbook

- name: "Check for AAP setup script as fallback"
  ansible.builtin.stat:
    path: "/tmp/{{ aapfolderpath }}/setup.sh"
  register: aap_containerized_setup_script

- name: "Debug - Show setup script status"
  ansible.builtin.debug:
    msg: "Setup script exists: {{ aap_containerized_setup_script.stat.exists }}"

- name: "Verify installer playbook was found"
  ansible.builtin.fail:
    msg: "No AAP installer playbook found in /tmp/{{ aapfolderpath }} and no setup.sh script available"
  when: 
    - aap_containerized_installer_playbook.files | length == 0
    - not aap_containerized_setup_script.stat.exists

- name: "Run AAP installer via ansible-playbook"
  ansible.builtin.shell: |
    cd /tmp/{{ aapfolderpath }} && \
    ansible-playbook -i /tmp/inventory-growth {{ aap_containerized_installer_playbook.files[0].path | basename }}
  register: aap_containerized_install_result
  become_user: aap
  environment:
    # Ensure required environment variables are available
    AAP_ADMIN_PASSWORD: "{{ lookup('env', 'AAP_ADMIN_PASSWORD') }}"
    RHN_REGISTRY_SVC: "{{ lookup('env', 'RHN_REGISTRY_SVC') }}"
    RHN_REGISTRY_TOKEN: "{{ lookup('env', 'RHN_REGISTRY_TOKEN') }}"
  when: aap_containerized_installer_playbook.files | length > 0
  failed_when: aap_containerized_install_result.rc != 0

- name: "Run AAP installer via setup script (fallback)"
  ansible.builtin.shell: |
    cd /tmp/{{ aapfolderpath }} && \
    ./setup.sh -i /tmp/inventory-growth
  register: aap_containerized_install_result
  become_user: aap
  environment:
    AAP_ADMIN_PASSWORD: "{{ lookup('env', 'AAP_ADMIN_PASSWORD') }}"
    RHN_REGISTRY_SVC: "{{ lookup('env', 'RHN_REGISTRY_SVC') }}"
    RHN_REGISTRY_TOKEN: "{{ lookup('env', 'RHN_REGISTRY_TOKEN') }}"
  when: 
    - aap_containerized_installer_playbook.files | length == 0
    - aap_containerized_setup_script.stat.exists
  failed_when: aap_containerized_install_result.rc != 0

- name: "Display Final Installation Result"
  ansible.builtin.debug:
    var: aap_containerized_install_result