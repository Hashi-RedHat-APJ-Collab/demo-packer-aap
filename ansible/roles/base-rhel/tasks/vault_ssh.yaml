- name: Create AAP user
  ansible.builtin.user:
    name: "{{ aap_user }}"
    comment: "Ansible Automation Platform user"
    shell: "/bin/bash"
    create_home: true
    home: "/home/{{ aap_user }}"
    state: present
    
# add aap user to sudoers but don't make root
- name: Add AAP user to wheel group
  ansible.builtin.user:
    name: aap
    groups: wheel
    append: true
  become: true

- name: Configure passwordless sudo for aap user
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/aap-access
    line: "aap ALL=(ALL) NOPASSWD: ALL"
    create: yes
    mode: '0440'
    validate: 'visudo -cf %s'
  become: true

- name: Create .ssh directory
  ansible.builtin.file:
    path: "/home/{{ aap_user }}/.ssh"
    state: directory
    owner: "{{ aap_user }}"
    group: "{{ aap_user }}"
    mode: '0700'

- name: Create authorized_keys file for vm_user if it doesn't exist
  ansible.builtin.file:
    path: "/home/{{ aap_user }}/.ssh/authorized_keys"
    state: touch
    mode: "0600"
    owner: "{{ aap_user }}"
    group: "{{ aap_user }}"

# Vault SSH CA Configuration
- name: Override Vault URL and Namespace from environment
  ansible.builtin.set_fact:
    vault_url: "{{ lookup('env', 'VAULT_URL') or vault_url }}"
    vault_namespace: "{{ lookup('env', 'VAULT_NAMESPACE') or vault_namespace }}"

- name: Debug Vault URL and Namespace
  ansible.builtin.debug:
    msg: "Vault URL: {{ vault_url }}, Namespace: {{ vault_namespace }}"

- name: Get Vault SSH CA public key
  ansible.builtin.get_url:
    url: "{{ vault_url }}/v1/ssh/public_key"
    headers:
      X-Vault-Namespace: "{{ vault_namespace }}"
    dest: /etc/ssh/trusted-user-ca-keys.pem
    mode: '0644'

# cat echo /etc/ssh/trusted-user-ca-keys.pem
- name: Ensure /etc/ssh/trusted-user-ca-keys.pem exists
  ansible.builtin.stat:
    path: /etc/ssh/trusted-user-ca-keys.pem
  register: trusted_ca_key

# cat the content of the file cat /etc/ssh/trusted-user-ca-keys.pem
- name: Read content of /etc/ssh/trusted-user-ca-keys.pem
  ansible.builtin.command:
    cmd: cat /etc/ssh/trusted-user-ca-keys.pem
  register: trusted_ca_key_content

- name: Display trusted CA key content
  ansible.builtin.debug:
    var: trusted_ca_key_content.stdout

- name: Restore SELinux context on SSH trust file
  ansible.builtin.command:
    cmd: restorecon -v /etc/ssh/trusted-user-ca-keys.pem

- name: Enable SSH public key authentication
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PubkeyAuthentication'
    line: 'PubkeyAuthentication yes'

- name: Configure SSH to trust Vault CA
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    state: present
    line: "TrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem"

- name: Register HCP Vault CA
  ansible.builtin.command: update-ca-trust extract

# - name: SELinux in permissive mode
#   ansible.posix.selinux:
#     policy: targeted
#     state: permissive

- name: Disable root SSH login
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#?PermitRootLogin"
    line: "PermitRootLogin no"

- name: Restart SSH
  ansible.builtin.systemd:
    name: sshd
    state: restarted
# # debug sshd -T
# - name: Debug SSHD configuration
#   ansible.builtin.command: sshd -T
#   register: sshd_config

# - name: Display SSHD configuration
#   ansible.builtin.debug:
#     var: sshd_config.stdout_lines

- name: Install packages
  dnf:
    name:
      - httpd
      - unzip
    state: latest

